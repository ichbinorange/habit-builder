# For local use
#server.port=3000
#spring.datasource.url=jdbc:postgresql://localhost:5432/habitbuilder

# For heroku deployment use
spring.datasource.driverClassName=org.postgresql.Driver
server.port=${PORT}

spring.datasource.username=
spring.datasource.password=

# create-drop --> for heroku deploy
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

server.error.include-message=always

# enable all the required beans for OAuth 2 login
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=
spring.security.oauth2.client.registration.google.redirectUri={baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.scope=email, profile

# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
app.oauth2.authorizedRedirectUris=http://localhost:3001/oauth2/redirect, myandroidapp://oauth2/redirect, myiosapp://oauth2/redirect

# for postman debug
logging.level.org.springframework.web=DEBUG  
